// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH feed_follows as(
	INSERT INTO feed_follows(id, created_at, updated_at, user_id, feed_id)
	VALUES(
		gen_random_uuid(),
		now(),
		now(),
		$1,
		$2
	) RETURNING id, created_at, updated_at, user_id, feed_id) SELECT feed_follows.id as feed_id, feed_follows.created_at as feed_created_at, feed_follows.updated_at as feed_updated_at, users.name as user_name, feeds.name as feed_name 
		FROM feed_follows
		INNER JOIN users ON feed_follows.user_id = users.id
		INNER JOIN feeds ON feed_follows.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

type CreateFeedFollowRow struct {
	FeedID        uuid.UUID
	FeedCreatedAt time.Time
	FeedUpdatedAt time.Time
	UserName      string
	FeedName      string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.UserID, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.FeedID,
		&i.FeedCreatedAt,
		&i.FeedUpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const removeFeedFollow = `-- name: RemoveFeedFollow :exec
DELETE 
	FROM feed_follows
	WHERE feed_follows.user_id = $1 AND feed_follows.feed_id = $2
`

type RemoveFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) RemoveFeedFollow(ctx context.Context, arg RemoveFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, removeFeedFollow, arg.UserID, arg.FeedID)
	return err
}

const selectAllFeedFollowsForUser = `-- name: SelectAllFeedFollowsForUser :many
SELECT feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_follows.feed_id, feeds.name, feeds.last_fetched_at
	FROM feed_follows
	INNER JOIN feeds ON feed_follows.feed_id = feeds.id
	WHERE feed_follows.user_id = $1
`

type SelectAllFeedFollowsForUserRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	UserID        uuid.UUID
	FeedID        uuid.UUID
	Name          string
	LastFetchedAt sql.NullTime
}

func (q *Queries) SelectAllFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]SelectAllFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllFeedFollowsForUserRow
	for rows.Next() {
		var i SelectAllFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.Name,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
